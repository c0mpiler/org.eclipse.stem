/*
* generated by Xtext
*/
package org.eclipse.stem.model.ctdl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CTDLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CompartmentTransitionDefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompartmentTransitionDefinitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetamodelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMetamodelMetamodelResourceCrossReference_0_0 = (CrossReference)cMetamodelAssignment_0.eContents().get(0);
		private final RuleCall cMetamodelMetamodelResourceIDTerminalRuleCall_0_0_1 = (RuleCall)cMetamodelMetamodelResourceCrossReference_0_0.eContents().get(1);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionTransitionBlockParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//CompartmentTransitionDefinitions:
		//	metamodel=[MetamodelResource]? expression=TransitionBlock;
		public ParserRule getRule() { return rule; }

		//metamodel=[MetamodelResource]? expression=TransitionBlock
		public Group getGroup() { return cGroup; }

		//metamodel=[MetamodelResource]?
		public Assignment getMetamodelAssignment_0() { return cMetamodelAssignment_0; }

		//[MetamodelResource]
		public CrossReference getMetamodelMetamodelResourceCrossReference_0_0() { return cMetamodelMetamodelResourceCrossReference_0_0; }

		//ID
		public RuleCall getMetamodelMetamodelResourceIDTerminalRuleCall_0_0_1() { return cMetamodelMetamodelResourceIDTerminalRuleCall_0_0_1; }

		//expression=TransitionBlock
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//TransitionBlock
		public RuleCall getExpressionTransitionBlockParserRuleCall_1_0() { return cExpressionTransitionBlockParserRuleCall_1_0; }
	}

	public class MetamodelResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetamodelResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetamodelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPackagePackageCrossReference_1_0 = (CrossReference)cPackageAssignment_1.eContents().get(0);
		private final RuleCall cPackagePackageSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cPackagePackageCrossReference_1_0.eContents().get(1);
		private final Keyword cModelKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cModelModelCrossReference_3_0 = (CrossReference)cModelAssignment_3.eContents().get(0);
		private final RuleCall cModelModelIDTerminalRuleCall_3_0_1 = (RuleCall)cModelModelCrossReference_3_0.eContents().get(1);
		private final Keyword cTransitionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTransitionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTransitionTransitionCrossReference_5_0 = (CrossReference)cTransitionAssignment_5.eContents().get(0);
		private final RuleCall cTransitionTransitionIDTerminalRuleCall_5_0_1 = (RuleCall)cTransitionTransitionCrossReference_5_0.eContents().get(1);
		
		//MetamodelResource:
		//	"metamodel " package=[metamodel::Package|STRING] "model " model=[metamodel::Model] "transition "
		//	transition=[metamodel::Transition];
		public ParserRule getRule() { return rule; }

		//"metamodel " package=[metamodel::Package|STRING] "model " model=[metamodel::Model] "transition "
		//transition=[metamodel::Transition]
		public Group getGroup() { return cGroup; }

		//"metamodel "
		public Keyword getMetamodelKeyword_0() { return cMetamodelKeyword_0; }

		//package=[metamodel::Package|STRING]
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }

		//[metamodel::Package|STRING]
		public CrossReference getPackagePackageCrossReference_1_0() { return cPackagePackageCrossReference_1_0; }

		//STRING
		public RuleCall getPackagePackageSTRINGTerminalRuleCall_1_0_1() { return cPackagePackageSTRINGTerminalRuleCall_1_0_1; }

		//"model "
		public Keyword getModelKeyword_2() { return cModelKeyword_2; }

		//model=[metamodel::Model]
		public Assignment getModelAssignment_3() { return cModelAssignment_3; }

		//[metamodel::Model]
		public CrossReference getModelModelCrossReference_3_0() { return cModelModelCrossReference_3_0; }

		//ID
		public RuleCall getModelModelIDTerminalRuleCall_3_0_1() { return cModelModelIDTerminalRuleCall_3_0_1; }

		//"transition "
		public Keyword getTransitionKeyword_4() { return cTransitionKeyword_4; }

		//transition=[metamodel::Transition]
		public Assignment getTransitionAssignment_5() { return cTransitionAssignment_5; }

		//[metamodel::Transition]
		public CrossReference getTransitionTransitionCrossReference_5_0() { return cTransitionTransitionCrossReference_5_0; }

		//ID
		public RuleCall getTransitionTransitionIDTerminalRuleCall_5_0_1() { return cTransitionTransitionIDTerminalRuleCall_5_0_1; }
	}

	public class TransitionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionBlock");
		private final Assignment cBlockAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_0 = (RuleCall)cBlockAssignment.eContents().get(0);
		
		//TransitionBlock: //'transition ' transition=[metamodel::Transition|TRANS_STMT]
		//	block=Block;
		public ParserRule getRule() { return rule; }

		////'transition ' transition=[metamodel::Transition|TRANS_STMT]
		//block=Block
		public Assignment getBlockAssignment() { return cBlockAssignment; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_0() { return cBlockBlockParserRuleCall_0; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceCompartmentCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceCompartmentIDTerminalRuleCall_1_0_1 = (RuleCall)cSourceCompartmentCrossReference_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetCompartmentCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetCompartmentIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetCompartmentCrossReference_3_0.eContents().get(1);
		
		//Transition returns metamodel::Transition:
		//	{metamodel::Transition} source=[metamodel::Compartment] "->" target=[metamodel::Compartment];
		public ParserRule getRule() { return rule; }

		//{metamodel::Transition} source=[metamodel::Compartment] "->" target=[metamodel::Compartment]
		public Group getGroup() { return cGroup; }

		//{metamodel::Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }

		//source=[metamodel::Compartment]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }

		//[metamodel::Compartment]
		public CrossReference getSourceCompartmentCrossReference_1_0() { return cSourceCompartmentCrossReference_1_0; }

		//ID
		public RuleCall getSourceCompartmentIDTerminalRuleCall_1_0_1() { return cSourceCompartmentIDTerminalRuleCall_1_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }

		//target=[metamodel::Compartment]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		//[metamodel::Compartment]
		public CrossReference getTargetCompartmentCrossReference_3_0() { return cTargetCompartmentCrossReference_3_0; }

		//ID
		public RuleCall getTargetCompartmentIDTerminalRuleCall_3_0_1() { return cTargetCompartmentIDTerminalRuleCall_3_0_1; }
	}

	public class CompartmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Compartment");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Compartment returns metamodel::Compartment:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsDefStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		private final Assignment cRetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRetReturnStatementParserRuleCall_2_0 = (RuleCall)cRetAssignment_2.eContents().get(0);
		
		////terminal STEM_TRANS_NAME : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_')* '->' ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_')*
		//Block:
		//	{Block} statements+=DefStatement* ret=ReturnStatement;
		public ParserRule getRule() { return rule; }

		//{Block} statements+=DefStatement* ret=ReturnStatement
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//statements+=DefStatement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//DefStatement
		public RuleCall getStatementsDefStatementParserRuleCall_1_0() { return cStatementsDefStatementParserRuleCall_1_0; }

		//ret=ReturnStatement
		public Assignment getRetAssignment_2() { return cRetAssignment_2; }

		//ReturnStatement
		public RuleCall getRetReturnStatementParserRuleCall_2_0() { return cRetReturnStatementParserRuleCall_2_0; }
	}

	public class DefStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarnameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarnameIDTerminalRuleCall_0_0 = (RuleCall)cVarnameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprEvaluationParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//DefStatement:
		//	varname=ID "=" expr=Evaluation;
		public ParserRule getRule() { return rule; }

		//varname=ID "=" expr=Evaluation
		public Group getGroup() { return cGroup; }

		//varname=ID
		public Assignment getVarnameAssignment_0() { return cVarnameAssignment_0; }

		//ID
		public RuleCall getVarnameIDTerminalRuleCall_0_0() { return cVarnameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expr=Evaluation
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Evaluation
		public RuleCall getExprEvaluationParserRuleCall_2_0() { return cExprEvaluationParserRuleCall_2_0; }
	}

	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeltaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEvaluationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ReturnStatement:
		//	"delta" Evaluation;
		public ParserRule getRule() { return rule; }

		//"delta" Evaluation
		public Group getGroup() { return cGroup; }

		//"delta"
		public Keyword getDeltaKeyword_0() { return cDeltaKeyword_0; }

		//Evaluation
		public RuleCall getEvaluationParserRuleCall_1() { return cEvaluationParserRuleCall_1; }
	}

	public class EvaluationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Evaluation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Evaluation:
		//	expression=Expression ";";
		public ParserRule getRule() { return rule; }

		//expression=Expression ";"
		public Group getGroup() { return cGroup; }

		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Addition;
		public ParserRule getRule() { return rule; }

		//Addition
		public RuleCall getAdditionParserRuleCall() { return cAdditionParserRuleCall; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition returns Expression:
		//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//(({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} "+" | {Minus.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegatedExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightNegatedExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication returns Expression:
		//	NegatedExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=NegatedExpression)*;
		public ParserRule getRule() { return rule; }

		//NegatedExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=NegatedExpression)*
		public Group getGroup() { return cGroup; }

		//NegatedExpression
		public RuleCall getNegatedExpressionParserRuleCall_0() { return cNegatedExpressionParserRuleCall_0; }

		//(({Multi.left=current} "*" | {Div.left=current} "/") right=NegatedExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multi.left=current} "*" | {Div.left=current} "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multi.left=current} "*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multi.left=current}
		public Action getMultiLeftAction_1_0_0_0() { return cMultiLeftAction_1_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{Div.left=current} "/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//right=NegatedExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//NegatedExpression
		public RuleCall getRightNegatedExpressionParserRuleCall_1_1_0() { return cRightNegatedExpressionParserRuleCall_1_1_0; }
	}

	public class NegatedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NegatedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNegateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNegateHyphenMinusKeyword_1_0 = (Keyword)cNegateAssignment_1.eContents().get(0);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpPrimaryExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//NegatedExpression returns Expression:
		//	{PrimaryExpression} negate?="-"? exp=PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//{PrimaryExpression} negate?="-"? exp=PrimaryExpression
		public Group getGroup() { return cGroup; }

		//{PrimaryExpression}
		public Action getPrimaryExpressionAction_0() { return cPrimaryExpressionAction_0; }

		//negate?="-"?
		public Assignment getNegateAssignment_1() { return cNegateAssignment_1; }

		//"-"
		public Keyword getNegateHyphenMinusKeyword_1_0() { return cNegateHyphenMinusKeyword_1_0; }

		//exp=PrimaryExpression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//PrimaryExpression
		public RuleCall getExpPrimaryExpressionParserRuleCall_2_0() { return cExpPrimaryExpressionParserRuleCall_2_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumberLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueNUMBERTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFunctionCallAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cRefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefFunctionReferenceCrossReference_2_1_0 = (CrossReference)cRefAssignment_2_1.eContents().get(0);
		private final RuleCall cRefFunctionReferenceIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRefFunctionReferenceCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cArgsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgsFunctionArgumentParserRuleCall_2_2_1_0 = (RuleCall)cArgsAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_2_2 = (Group)cGroup_2_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_2_0 = (Keyword)cGroup_2_2_2.eContents().get(0);
		private final Assignment cArgsAssignment_2_2_2_1 = (Assignment)cGroup_2_2_2.eContents().get(1);
		private final RuleCall cArgsFunctionArgumentParserRuleCall_2_2_2_1_0 = (RuleCall)cArgsAssignment_2_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2_3 = (Keyword)cGroup_2_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cVariableReferenceAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefScopedVariableReferenceCrossReference_3_1_0 = (CrossReference)cRefAssignment_3_1.eContents().get(0);
		private final RuleCall cRefScopedVariableReferenceIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRefScopedVariableReferenceCrossReference_3_1_0.eContents().get(1);
		
		//PrimaryExpression returns Expression:
		//	{NumberLiteral} value=NUMBER | "(" exp=Expression ")" | {FunctionCall} ref=[FunctionReference] ("("
		//	args+=FunctionArgument? ("," args+=FunctionArgument)* ")") | {VariableReference} ref=[ScopedVariableReference];
		public ParserRule getRule() { return rule; }

		//{NumberLiteral} value=NUMBER | "(" exp=Expression ")" | {FunctionCall} ref=[FunctionReference] ("("
		//args+=FunctionArgument? ("," args+=FunctionArgument)* ")") | {VariableReference} ref=[ScopedVariableReference]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NumberLiteral} value=NUMBER
		public Group getGroup_0() { return cGroup_0; }

		//{NumberLiteral}
		public Action getNumberLiteralAction_0_0() { return cNumberLiteralAction_0_0; }

		//value=NUMBER
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//NUMBER
		public RuleCall getValueNUMBERTerminalRuleCall_0_1_0() { return cValueNUMBERTerminalRuleCall_0_1_0; }

		//"(" exp=Expression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//exp=Expression
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_1_0() { return cExpExpressionParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//{FunctionCall} ref=[FunctionReference] ("(" args+=FunctionArgument? ("," args+=FunctionArgument)* ")")
		public Group getGroup_2() { return cGroup_2; }

		//{FunctionCall}
		public Action getFunctionCallAction_2_0() { return cFunctionCallAction_2_0; }

		//ref=[FunctionReference]
		public Assignment getRefAssignment_2_1() { return cRefAssignment_2_1; }

		//[FunctionReference]
		public CrossReference getRefFunctionReferenceCrossReference_2_1_0() { return cRefFunctionReferenceCrossReference_2_1_0; }

		//ID
		public RuleCall getRefFunctionReferenceIDTerminalRuleCall_2_1_0_1() { return cRefFunctionReferenceIDTerminalRuleCall_2_1_0_1; }

		//"(" args+=FunctionArgument? ("," args+=FunctionArgument)* ")"
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2_0() { return cLeftParenthesisKeyword_2_2_0; }

		//args+=FunctionArgument?
		public Assignment getArgsAssignment_2_2_1() { return cArgsAssignment_2_2_1; }

		//FunctionArgument
		public RuleCall getArgsFunctionArgumentParserRuleCall_2_2_1_0() { return cArgsFunctionArgumentParserRuleCall_2_2_1_0; }

		//("," args+=FunctionArgument)*
		public Group getGroup_2_2_2() { return cGroup_2_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_2_0() { return cCommaKeyword_2_2_2_0; }

		//args+=FunctionArgument
		public Assignment getArgsAssignment_2_2_2_1() { return cArgsAssignment_2_2_2_1; }

		//FunctionArgument
		public RuleCall getArgsFunctionArgumentParserRuleCall_2_2_2_1_0() { return cArgsFunctionArgumentParserRuleCall_2_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2_3() { return cRightParenthesisKeyword_2_2_3; }

		//{VariableReference} ref=[ScopedVariableReference]
		public Group getGroup_3() { return cGroup_3; }

		//{VariableReference}
		public Action getVariableReferenceAction_3_0() { return cVariableReferenceAction_3_0; }

		//ref=[ScopedVariableReference]
		public Assignment getRefAssignment_3_1() { return cRefAssignment_3_1; }

		//[ScopedVariableReference]
		public CrossReference getRefScopedVariableReferenceCrossReference_3_1_0() { return cRefScopedVariableReferenceCrossReference_3_1_0; }

		//ID
		public RuleCall getRefScopedVariableReferenceIDTerminalRuleCall_3_1_0_1() { return cRefScopedVariableReferenceIDTerminalRuleCall_3_1_0_1; }
	}

	public class FunctionArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FunctionArgument returns Expression:
		//	{BooleanLiteral} value=BOOLEAN | {StringLiteral} value=STRING | Expression;
		public ParserRule getRule() { return rule; }

		//{BooleanLiteral} value=BOOLEAN | {StringLiteral} value=STRING | Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BooleanLiteral} value=BOOLEAN
		public Group getGroup_0() { return cGroup_0; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0_0() { return cBooleanLiteralAction_0_0; }

		//value=BOOLEAN
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_0_1_0() { return cValueBOOLEANTerminalRuleCall_0_1_0; }

		//{StringLiteral} value=STRING
		public Group getGroup_1() { return cGroup_1; }

		//{StringLiteral}
		public Action getStringLiteralAction_1_0() { return cStringLiteralAction_1_0; }

		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
	}

	public class FunctionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExternalFunctionReferenceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFuncAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFuncExternalFunctionDefinitionCrossReference_1_1_0 = (CrossReference)cFuncAssignment_1_1.eContents().get(0);
		private final RuleCall cFuncExternalFunctionDefinitionIDTerminalRuleCall_1_1_0_1 = (RuleCall)cFuncExternalFunctionDefinitionCrossReference_1_1_0.eContents().get(1);
		
		//FunctionReference:
		//	name=ID | {ExternalFunctionReference} func=[extFunc::ExternalFunctionDefinition];
		public ParserRule getRule() { return rule; }

		//name=ID | {ExternalFunctionReference} func=[extFunc::ExternalFunctionDefinition]
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//{ExternalFunctionReference} func=[extFunc::ExternalFunctionDefinition]
		public Group getGroup_1() { return cGroup_1; }

		//{ExternalFunctionReference}
		public Action getExternalFunctionReferenceAction_1_0() { return cExternalFunctionReferenceAction_1_0; }

		//func=[extFunc::ExternalFunctionDefinition]
		public Assignment getFuncAssignment_1_1() { return cFuncAssignment_1_1; }

		//[extFunc::ExternalFunctionDefinition]
		public CrossReference getFuncExternalFunctionDefinitionCrossReference_1_1_0() { return cFuncExternalFunctionDefinitionCrossReference_1_1_0; }

		//ID
		public RuleCall getFuncExternalFunctionDefinitionIDTerminalRuleCall_1_1_0_1() { return cFuncExternalFunctionDefinitionIDTerminalRuleCall_1_1_0_1; }
	}

	public class ScopedVariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScopedVariableReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Action cLocalVariableReferenceAction_1 = (Action)cAlternatives.eContents().get(1);
		private final Action cGlobalVariableReferenceAction_2 = (Action)cAlternatives.eContents().get(2);
		private final Action cCompartmentReferenceAction_3 = (Action)cAlternatives.eContents().get(3);
		private final Action cModelParamReferenceAction_4 = (Action)cAlternatives.eContents().get(4);
		
		//ScopedVariableReference:
		//	name=ID | {LocalVariableReference} | {GlobalVariableReference} | {CompartmentReference} | {ModelParamReference};
		public ParserRule getRule() { return rule; }

		//name=ID | {LocalVariableReference} | {GlobalVariableReference} | {CompartmentReference} | {ModelParamReference}
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//{LocalVariableReference}
		public Action getLocalVariableReferenceAction_1() { return cLocalVariableReferenceAction_1; }

		//{GlobalVariableReference}
		public Action getGlobalVariableReferenceAction_2() { return cGlobalVariableReferenceAction_2; }

		//{CompartmentReference}
		public Action getCompartmentReferenceAction_3() { return cCompartmentReferenceAction_3; }

		//{ModelParamReference}
		public Action getModelParamReferenceAction_4() { return cModelParamReferenceAction_4; }
	}

	public class LocalVariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalVariableReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefStatementReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cObjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cObjDefStatementCrossReference_1_0 = (CrossReference)cObjAssignment_1.eContents().get(0);
		private final RuleCall cObjDefStatementIDTerminalRuleCall_1_0_1 = (RuleCall)cObjDefStatementCrossReference_1_0.eContents().get(1);
		
		//LocalVariableReference:
		//	{DefStatementReference} obj=[DefStatement];
		public ParserRule getRule() { return rule; }

		//{DefStatementReference} obj=[DefStatement]
		public Group getGroup() { return cGroup; }

		//{DefStatementReference}
		public Action getDefStatementReferenceAction_0() { return cDefStatementReferenceAction_0; }

		//obj=[DefStatement]
		public Assignment getObjAssignment_1() { return cObjAssignment_1; }

		//[DefStatement]
		public CrossReference getObjDefStatementCrossReference_1_0() { return cObjDefStatementCrossReference_1_0; }

		//ID
		public RuleCall getObjDefStatementIDTerminalRuleCall_1_0_1() { return cObjDefStatementIDTerminalRuleCall_1_0_1; }
	}

	public class CompartmentReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompartmentReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cObjAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cObjCompartmentCrossReference_0_0 = (CrossReference)cObjAssignment_0.eContents().get(0);
		private final RuleCall cObjCompartmentIDTerminalRuleCall_0_0_1 = (RuleCall)cObjCompartmentCrossReference_0_0.eContents().get(1);
		private final Action cAbsoluteCompartmentValueReferenceAction_1 = (Action)cAlternatives.eContents().get(1);
		private final Action cRelativeCompartmentValueReferenceAction_2 = (Action)cAlternatives.eContents().get(2);
		
		//CompartmentReference:
		//	obj=[metamodel::Compartment] | {AbsoluteCompartmentValueReference} | {RelativeCompartmentValueReference};
		public ParserRule getRule() { return rule; }

		//obj=[metamodel::Compartment] | {AbsoluteCompartmentValueReference} | {RelativeCompartmentValueReference}
		public Alternatives getAlternatives() { return cAlternatives; }

		//obj=[metamodel::Compartment]
		public Assignment getObjAssignment_0() { return cObjAssignment_0; }

		//[metamodel::Compartment]
		public CrossReference getObjCompartmentCrossReference_0_0() { return cObjCompartmentCrossReference_0_0; }

		//ID
		public RuleCall getObjCompartmentIDTerminalRuleCall_0_0_1() { return cObjCompartmentIDTerminalRuleCall_0_0_1; }

		//{AbsoluteCompartmentValueReference}
		public Action getAbsoluteCompartmentValueReferenceAction_1() { return cAbsoluteCompartmentValueReferenceAction_1; }

		//{RelativeCompartmentValueReference}
		public Action getRelativeCompartmentValueReferenceAction_2() { return cRelativeCompartmentValueReferenceAction_2; }
	}

	public class ModelParamReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelParamReference");
		private final Assignment cObjAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cObjModelParamCrossReference_0 = (CrossReference)cObjAssignment.eContents().get(0);
		private final RuleCall cObjModelParamIDTerminalRuleCall_0_1 = (RuleCall)cObjModelParamCrossReference_0.eContents().get(1);
		
		//ModelParamReference:
		//	obj=[metamodel::ModelParam];
		public ParserRule getRule() { return rule; }

		//obj=[metamodel::ModelParam]
		public Assignment getObjAssignment() { return cObjAssignment; }

		//[metamodel::ModelParam]
		public CrossReference getObjModelParamCrossReference_0() { return cObjModelParamCrossReference_0; }

		//ID
		public RuleCall getObjModelParamIDTerminalRuleCall_0_1() { return cObjModelParamIDTerminalRuleCall_0_1; }
	}

	public class GlobalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//GlobalVariable:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private final CompartmentTransitionDefinitionsElements pCompartmentTransitionDefinitions;
	private final MetamodelResourceElements pMetamodelResource;
	private final TransitionBlockElements pTransitionBlock;
	private final TransitionElements pTransition;
	private final CompartmentElements pCompartment;
	private final BlockElements pBlock;
	private final DefStatementElements pDefStatement;
	private final ReturnStatementElements pReturnStatement;
	private final EvaluationElements pEvaluation;
	private final ExpressionElements pExpression;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final NegatedExpressionElements pNegatedExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final FunctionArgumentElements pFunctionArgument;
	private final FunctionReferenceElements pFunctionReference;
	private final ScopedVariableReferenceElements pScopedVariableReference;
	private final LocalVariableReferenceElements pLocalVariableReference;
	private final CompartmentReferenceElements pCompartmentReference;
	private final ModelParamReferenceElements pModelParamReference;
	private final GlobalVariableElements pGlobalVariable;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tNUMBER;
	private final TerminalRule tINT;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CTDLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCompartmentTransitionDefinitions = new CompartmentTransitionDefinitionsElements();
		this.pMetamodelResource = new MetamodelResourceElements();
		this.pTransitionBlock = new TransitionBlockElements();
		this.pTransition = new TransitionElements();
		this.pCompartment = new CompartmentElements();
		this.pBlock = new BlockElements();
		this.pDefStatement = new DefStatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pEvaluation = new EvaluationElements();
		this.pExpression = new ExpressionElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pNegatedExpression = new NegatedExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pFunctionArgument = new FunctionArgumentElements();
		this.pFunctionReference = new FunctionReferenceElements();
		this.pScopedVariableReference = new ScopedVariableReferenceElements();
		this.pLocalVariableReference = new LocalVariableReferenceElements();
		this.pCompartmentReference = new CompartmentReferenceElements();
		this.pModelParamReference = new ModelParamReferenceElements();
		this.pGlobalVariable = new GlobalVariableElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN");
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.stem.model.ctdl.CTDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CompartmentTransitionDefinitions:
	//	metamodel=[MetamodelResource]? expression=TransitionBlock;
	public CompartmentTransitionDefinitionsElements getCompartmentTransitionDefinitionsAccess() {
		return pCompartmentTransitionDefinitions;
	}
	
	public ParserRule getCompartmentTransitionDefinitionsRule() {
		return getCompartmentTransitionDefinitionsAccess().getRule();
	}

	//MetamodelResource:
	//	"metamodel " package=[metamodel::Package|STRING] "model " model=[metamodel::Model] "transition "
	//	transition=[metamodel::Transition];
	public MetamodelResourceElements getMetamodelResourceAccess() {
		return pMetamodelResource;
	}
	
	public ParserRule getMetamodelResourceRule() {
		return getMetamodelResourceAccess().getRule();
	}

	//TransitionBlock: //'transition ' transition=[metamodel::Transition|TRANS_STMT]
	//	block=Block;
	public TransitionBlockElements getTransitionBlockAccess() {
		return pTransitionBlock;
	}
	
	public ParserRule getTransitionBlockRule() {
		return getTransitionBlockAccess().getRule();
	}

	//Transition returns metamodel::Transition:
	//	{metamodel::Transition} source=[metamodel::Compartment] "->" target=[metamodel::Compartment];
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//Compartment returns metamodel::Compartment:
	//	name=ID;
	public CompartmentElements getCompartmentAccess() {
		return pCompartment;
	}
	
	public ParserRule getCompartmentRule() {
		return getCompartmentAccess().getRule();
	}

	////terminal STEM_TRANS_NAME : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_')* '->' ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_')*
	//Block:
	//	{Block} statements+=DefStatement* ret=ReturnStatement;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//DefStatement:
	//	varname=ID "=" expr=Evaluation;
	public DefStatementElements getDefStatementAccess() {
		return pDefStatement;
	}
	
	public ParserRule getDefStatementRule() {
		return getDefStatementAccess().getRule();
	}

	//ReturnStatement:
	//	"delta" Evaluation;
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	//Evaluation:
	//	expression=Expression ";";
	public EvaluationElements getEvaluationAccess() {
		return pEvaluation;
	}
	
	public ParserRule getEvaluationRule() {
		return getEvaluationAccess().getRule();
	}

	//Expression:
	//	Addition;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Addition returns Expression:
	//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	NegatedExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=NegatedExpression)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//NegatedExpression returns Expression:
	//	{PrimaryExpression} negate?="-"? exp=PrimaryExpression;
	public NegatedExpressionElements getNegatedExpressionAccess() {
		return pNegatedExpression;
	}
	
	public ParserRule getNegatedExpressionRule() {
		return getNegatedExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	{NumberLiteral} value=NUMBER | "(" exp=Expression ")" | {FunctionCall} ref=[FunctionReference] ("("
	//	args+=FunctionArgument? ("," args+=FunctionArgument)* ")") | {VariableReference} ref=[ScopedVariableReference];
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//FunctionArgument returns Expression:
	//	{BooleanLiteral} value=BOOLEAN | {StringLiteral} value=STRING | Expression;
	public FunctionArgumentElements getFunctionArgumentAccess() {
		return pFunctionArgument;
	}
	
	public ParserRule getFunctionArgumentRule() {
		return getFunctionArgumentAccess().getRule();
	}

	//FunctionReference:
	//	name=ID | {ExternalFunctionReference} func=[extFunc::ExternalFunctionDefinition];
	public FunctionReferenceElements getFunctionReferenceAccess() {
		return pFunctionReference;
	}
	
	public ParserRule getFunctionReferenceRule() {
		return getFunctionReferenceAccess().getRule();
	}

	//ScopedVariableReference:
	//	name=ID | {LocalVariableReference} | {GlobalVariableReference} | {CompartmentReference} | {ModelParamReference};
	public ScopedVariableReferenceElements getScopedVariableReferenceAccess() {
		return pScopedVariableReference;
	}
	
	public ParserRule getScopedVariableReferenceRule() {
		return getScopedVariableReferenceAccess().getRule();
	}

	//LocalVariableReference:
	//	{DefStatementReference} obj=[DefStatement];
	public LocalVariableReferenceElements getLocalVariableReferenceAccess() {
		return pLocalVariableReference;
	}
	
	public ParserRule getLocalVariableReferenceRule() {
		return getLocalVariableReferenceAccess().getRule();
	}

	//CompartmentReference:
	//	obj=[metamodel::Compartment] | {AbsoluteCompartmentValueReference} | {RelativeCompartmentValueReference};
	public CompartmentReferenceElements getCompartmentReferenceAccess() {
		return pCompartmentReference;
	}
	
	public ParserRule getCompartmentReferenceRule() {
		return getCompartmentReferenceAccess().getRule();
	}

	//ModelParamReference:
	//	obj=[metamodel::ModelParam];
	public ModelParamReferenceElements getModelParamReferenceAccess() {
		return pModelParamReference;
	}
	
	public ParserRule getModelParamReferenceRule() {
		return getModelParamReferenceAccess().getRule();
	}

	//GlobalVariable:
	//	name=ID;
	public GlobalVariableElements getGlobalVariableAccess() {
		return pGlobalVariable;
	}
	
	public ParserRule getGlobalVariableRule() {
		return getGlobalVariableAccess().getRule();
	}

	//// Commented out since it breaks expressions with '-' sign.
	////terminal TRANS_STMT returns ecore::EString:
	////	ID '->' ID
	////;
	//terminal BOOLEAN returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	} 

	//terminal NUMBER returns ecore::EDouble:
	//	("0".."9"+ ("." "0".."9"*)? | "." "0".."9"+) (("e" | "E") ("+" | "-")? "0".."9"+)?;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	} 

	//terminal INT returns ecore::EInt:
	//	"this one has been deactivated";
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
