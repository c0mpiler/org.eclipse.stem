/*
* generated by Xtext
*/
package org.eclipse.stem.model.ctdl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.stem.model.ctdl.services.CTDLGrammarAccess;

public class CTDLParser extends AbstractContentAssistParser {
	
	@Inject
	private CTDLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.stem.model.ctdl.ui.contentassist.antlr.internal.InternalCTDLParser createParser() {
		org.eclipse.stem.model.ctdl.ui.contentassist.antlr.internal.InternalCTDLParser result = new org.eclipse.stem.model.ctdl.ui.contentassist.antlr.internal.InternalCTDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAdditionAccess().getAlternatives_1_0(), "rule__Addition__Alternatives_1_0");
					put(grammarAccess.getMultiplicationAccess().getAlternatives_1_0(), "rule__Multiplication__Alternatives_1_0");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getFunctionArgumentAccess().getAlternatives(), "rule__FunctionArgument__Alternatives");
					put(grammarAccess.getFunctionReferenceAccess().getAlternatives(), "rule__FunctionReference__Alternatives");
					put(grammarAccess.getScopedVariableReferenceAccess().getAlternatives(), "rule__ScopedVariableReference__Alternatives");
					put(grammarAccess.getCompartmentReferenceAccess().getAlternatives(), "rule__CompartmentReference__Alternatives");
					put(grammarAccess.getCompartmentTransitionDefinitionsAccess().getGroup(), "rule__CompartmentTransitionDefinitions__Group__0");
					put(grammarAccess.getMetamodelResourceAccess().getGroup(), "rule__MetamodelResource__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getDefStatementAccess().getGroup(), "rule__DefStatement__Group__0");
					put(grammarAccess.getReturnStatementAccess().getGroup(), "rule__ReturnStatement__Group__0");
					put(grammarAccess.getEvaluationAccess().getGroup(), "rule__Evaluation__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
					put(grammarAccess.getAdditionAccess().getGroup_1_0_0(), "rule__Addition__Group_1_0_0__0");
					put(grammarAccess.getAdditionAccess().getGroup_1_0_1(), "rule__Addition__Group_1_0_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1_0_0(), "rule__Multiplication__Group_1_0_0__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1_0_1(), "rule__Multiplication__Group_1_0_1__0");
					put(grammarAccess.getNegatedExpressionAccess().getGroup(), "rule__NegatedExpression__Group__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_0(), "rule__PrimaryExpression__Group_0__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_1(), "rule__PrimaryExpression__Group_1__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_2(), "rule__PrimaryExpression__Group_2__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_2_2(), "rule__PrimaryExpression__Group_2_2__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_2_2_2(), "rule__PrimaryExpression__Group_2_2_2__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_3(), "rule__PrimaryExpression__Group_3__0");
					put(grammarAccess.getFunctionArgumentAccess().getGroup_0(), "rule__FunctionArgument__Group_0__0");
					put(grammarAccess.getFunctionArgumentAccess().getGroup_1(), "rule__FunctionArgument__Group_1__0");
					put(grammarAccess.getFunctionReferenceAccess().getGroup_1(), "rule__FunctionReference__Group_1__0");
					put(grammarAccess.getLocalVariableReferenceAccess().getGroup(), "rule__LocalVariableReference__Group__0");
					put(grammarAccess.getCompartmentTransitionDefinitionsAccess().getMetamodelAssignment_0(), "rule__CompartmentTransitionDefinitions__MetamodelAssignment_0");
					put(grammarAccess.getCompartmentTransitionDefinitionsAccess().getExpressionAssignment_1(), "rule__CompartmentTransitionDefinitions__ExpressionAssignment_1");
					put(grammarAccess.getMetamodelResourceAccess().getPackageAssignment_1(), "rule__MetamodelResource__PackageAssignment_1");
					put(grammarAccess.getMetamodelResourceAccess().getModelAssignment_3(), "rule__MetamodelResource__ModelAssignment_3");
					put(grammarAccess.getMetamodelResourceAccess().getTransitionAssignment_5(), "rule__MetamodelResource__TransitionAssignment_5");
					put(grammarAccess.getTransitionBlockAccess().getBlockAssignment(), "rule__TransitionBlock__BlockAssignment");
					put(grammarAccess.getTransitionAccess().getSourceAssignment_1(), "rule__Transition__SourceAssignment_1");
					put(grammarAccess.getTransitionAccess().getTargetAssignment_3(), "rule__Transition__TargetAssignment_3");
					put(grammarAccess.getCompartmentAccess().getNameAssignment(), "rule__Compartment__NameAssignment");
					put(grammarAccess.getBlockAccess().getStatementsAssignment_1(), "rule__Block__StatementsAssignment_1");
					put(grammarAccess.getBlockAccess().getRetAssignment_2(), "rule__Block__RetAssignment_2");
					put(grammarAccess.getDefStatementAccess().getVarnameAssignment_0(), "rule__DefStatement__VarnameAssignment_0");
					put(grammarAccess.getDefStatementAccess().getExprAssignment_2(), "rule__DefStatement__ExprAssignment_2");
					put(grammarAccess.getEvaluationAccess().getExpressionAssignment_0(), "rule__Evaluation__ExpressionAssignment_0");
					put(grammarAccess.getAdditionAccess().getRightAssignment_1_1(), "rule__Addition__RightAssignment_1_1");
					put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1(), "rule__Multiplication__RightAssignment_1_1");
					put(grammarAccess.getNegatedExpressionAccess().getNegateAssignment_1(), "rule__NegatedExpression__NegateAssignment_1");
					put(grammarAccess.getNegatedExpressionAccess().getExpAssignment_2(), "rule__NegatedExpression__ExpAssignment_2");
					put(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_0_1(), "rule__PrimaryExpression__ValueAssignment_0_1");
					put(grammarAccess.getPrimaryExpressionAccess().getExpAssignment_1_1(), "rule__PrimaryExpression__ExpAssignment_1_1");
					put(grammarAccess.getPrimaryExpressionAccess().getRefAssignment_2_1(), "rule__PrimaryExpression__RefAssignment_2_1");
					put(grammarAccess.getPrimaryExpressionAccess().getArgsAssignment_2_2_1(), "rule__PrimaryExpression__ArgsAssignment_2_2_1");
					put(grammarAccess.getPrimaryExpressionAccess().getArgsAssignment_2_2_2_1(), "rule__PrimaryExpression__ArgsAssignment_2_2_2_1");
					put(grammarAccess.getPrimaryExpressionAccess().getRefAssignment_3_1(), "rule__PrimaryExpression__RefAssignment_3_1");
					put(grammarAccess.getFunctionArgumentAccess().getValueAssignment_0_1(), "rule__FunctionArgument__ValueAssignment_0_1");
					put(grammarAccess.getFunctionArgumentAccess().getValueAssignment_1_1(), "rule__FunctionArgument__ValueAssignment_1_1");
					put(grammarAccess.getFunctionReferenceAccess().getNameAssignment_0(), "rule__FunctionReference__NameAssignment_0");
					put(grammarAccess.getFunctionReferenceAccess().getFuncAssignment_1_1(), "rule__FunctionReference__FuncAssignment_1_1");
					put(grammarAccess.getScopedVariableReferenceAccess().getNameAssignment_0(), "rule__ScopedVariableReference__NameAssignment_0");
					put(grammarAccess.getLocalVariableReferenceAccess().getObjAssignment_1(), "rule__LocalVariableReference__ObjAssignment_1");
					put(grammarAccess.getCompartmentReferenceAccess().getObjAssignment_0(), "rule__CompartmentReference__ObjAssignment_0");
					put(grammarAccess.getModelParamReferenceAccess().getObjAssignment(), "rule__ModelParamReference__ObjAssignment");
					put(grammarAccess.getGlobalVariableAccess().getNameAssignment(), "rule__GlobalVariable__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.stem.model.ctdl.ui.contentassist.antlr.internal.InternalCTDLParser typedParser = (org.eclipse.stem.model.ctdl.ui.contentassist.antlr.internal.InternalCTDLParser) parser;
			typedParser.entryRuleCompartmentTransitionDefinitions();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public CTDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CTDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
