/*
* generated by Xtext
*/
grammar InternalCTDL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.stem.model.ctdl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.stem.model.ctdl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.stem.model.ctdl.services.CTDLGrammarAccess;

}

@parser::members {
 
 	private CTDLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CTDLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleCompartmentTransitionDefinitions
entryRuleCompartmentTransitionDefinitions 
:
{ before(grammarAccess.getCompartmentTransitionDefinitionsRule()); }
	 ruleCompartmentTransitionDefinitions
{ after(grammarAccess.getCompartmentTransitionDefinitionsRule()); } 
	 EOF 
;

// Rule CompartmentTransitionDefinitions
ruleCompartmentTransitionDefinitions
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompartmentTransitionDefinitionsAccess().getGroup()); }
(rule__CompartmentTransitionDefinitions__Group__0)
{ after(grammarAccess.getCompartmentTransitionDefinitionsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleTransitionBlock
entryRuleTransitionBlock 
:
{ before(grammarAccess.getTransitionBlockRule()); }
	 ruleTransitionBlock
{ after(grammarAccess.getTransitionBlockRule()); } 
	 EOF 
;

// Rule TransitionBlock
ruleTransitionBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionBlockAccess().getBlockAssignment()); }
(rule__TransitionBlock__BlockAssignment)
{ after(grammarAccess.getTransitionBlockAccess().getBlockAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getGroup()); }
(rule__Block__Group__0)
{ after(grammarAccess.getBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefStatement
entryRuleDefStatement 
:
{ before(grammarAccess.getDefStatementRule()); }
	 ruleDefStatement
{ after(grammarAccess.getDefStatementRule()); } 
	 EOF 
;

// Rule DefStatement
ruleDefStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefStatementAccess().getGroup()); }
(rule__DefStatement__Group__0)
{ after(grammarAccess.getDefStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnStatement
entryRuleReturnStatement 
:
{ before(grammarAccess.getReturnStatementRule()); }
	 ruleReturnStatement
{ after(grammarAccess.getReturnStatementRule()); } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnStatementAccess().getGroup()); }
(rule__ReturnStatement__Group__0)
{ after(grammarAccess.getReturnStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvaluation
entryRuleEvaluation 
:
{ before(grammarAccess.getEvaluationRule()); }
	 ruleEvaluation
{ after(grammarAccess.getEvaluationRule()); } 
	 EOF 
;

// Rule Evaluation
ruleEvaluation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEvaluationAccess().getGroup()); }
(rule__Evaluation__Group__0)
{ after(grammarAccess.getEvaluationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAdditionParserRuleCall()); }
	ruleAddition
{ after(grammarAccess.getExpressionAccess().getAdditionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddition
entryRuleAddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegatedExpression
entryRuleNegatedExpression 
:
{ before(grammarAccess.getNegatedExpressionRule()); }
	 ruleNegatedExpression
{ after(grammarAccess.getNegatedExpressionRule()); } 
	 EOF 
;

// Rule NegatedExpression
ruleNegatedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegatedExpressionAccess().getGroup()); }
(rule__NegatedExpression__Group__0)
{ after(grammarAccess.getNegatedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionArgument
entryRuleFunctionArgument 
:
{ before(grammarAccess.getFunctionArgumentRule()); }
	 ruleFunctionArgument
{ after(grammarAccess.getFunctionArgumentRule()); } 
	 EOF 
;

// Rule FunctionArgument
ruleFunctionArgument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionArgumentAccess().getAlternatives()); }
(rule__FunctionArgument__Alternatives)
{ after(grammarAccess.getFunctionArgumentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Addition__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
(rule__Addition__Group_1_0_0__0)
{ after(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
(rule__Addition__Group_1_0_1__0)
{ after(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_0()); }
(rule__Multiplication__Group_1_0_0__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_1()); }
(rule__Multiplication__Group_1_0_1__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
(rule__PrimaryExpression__Group_0__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
(rule__PrimaryExpression__Group_1__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
(rule__PrimaryExpression__Group_2__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_3()); }
(rule__PrimaryExpression__Group_3__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgument__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentAccess().getGroup_0()); }
(rule__FunctionArgument__Group_0__0)
{ after(grammarAccess.getFunctionArgumentAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFunctionArgumentAccess().getGroup_1()); }
(rule__FunctionArgument__Group_1__0)
{ after(grammarAccess.getFunctionArgumentAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getFunctionArgumentAccess().getExpressionParserRuleCall_2()); }
	ruleExpression
{ after(grammarAccess.getFunctionArgumentAccess().getExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompartmentTransitionDefinitions__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompartmentTransitionDefinitions__Group__0__Impl
	rule__CompartmentTransitionDefinitions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompartmentTransitionDefinitions__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompartmentTransitionDefinitionsAccess().getMetamodelAssignment_0()); }
(rule__CompartmentTransitionDefinitions__MetamodelAssignment_0)?
{ after(grammarAccess.getCompartmentTransitionDefinitionsAccess().getMetamodelAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompartmentTransitionDefinitions__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompartmentTransitionDefinitions__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompartmentTransitionDefinitions__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompartmentTransitionDefinitionsAccess().getExpressionAssignment_1()); }
(rule__CompartmentTransitionDefinitions__ExpressionAssignment_1)
{ after(grammarAccess.getCompartmentTransitionDefinitionsAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
(

)
{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
(rule__Block__StatementsAssignment_1)*
{ after(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getRetAssignment_2()); }
(rule__Block__RetAssignment_2)
{ after(grammarAccess.getBlockAccess().getRetAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DefStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefStatement__Group__0__Impl
	rule__DefStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefStatementAccess().getVarnameAssignment_0()); }
(rule__DefStatement__VarnameAssignment_0)
{ after(grammarAccess.getDefStatementAccess().getVarnameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefStatement__Group__1__Impl
	rule__DefStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefStatementAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getDefStatementAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefStatementAccess().getExprAssignment_2()); }
(rule__DefStatement__ExprAssignment_2)
{ after(grammarAccess.getDefStatementAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ReturnStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__0__Impl
	rule__ReturnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getDeltaKeyword_0()); }

	'delta' 

{ after(grammarAccess.getReturnStatementAccess().getDeltaKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getEvaluationParserRuleCall_1()); }
	ruleEvaluation
{ after(grammarAccess.getReturnStatementAccess().getEvaluationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Evaluation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Evaluation__Group__0__Impl
	rule__Evaluation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationAccess().getExpressionAssignment_0()); }
(rule__Evaluation__ExpressionAssignment_0)
{ after(grammarAccess.getEvaluationAccess().getExpressionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Evaluation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Evaluation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getEvaluationAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)*
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
(rule__Addition__Alternatives_1_0)
{ after(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
(rule__Addition__RightAssignment_1_1)
{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_0__0__Impl
	rule__Addition__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1()); }

	'+' 

{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_1__0__Impl
	rule__Addition__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }

	'-' 

{ after(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getNegatedExpressionParserRuleCall_0()); }
	ruleNegatedExpression
{ after(grammarAccess.getMultiplicationAccess().getNegatedExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAlternatives_1_0()); }
(rule__Multiplication__Alternatives_1_0)
{ after(grammarAccess.getMultiplicationAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
(rule__Multiplication__RightAssignment_1_1)
{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_0__0__Impl
	rule__Multiplication__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1()); }

	'*' 

{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_1__0__Impl
	rule__Multiplication__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1()); }

	'/' 

{ after(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NegatedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegatedExpression__Group__0__Impl
	rule__NegatedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegatedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegatedExpressionAccess().getPrimaryExpressionAction_0()); }
(

)
{ after(grammarAccess.getNegatedExpressionAccess().getPrimaryExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegatedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegatedExpression__Group__1__Impl
	rule__NegatedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NegatedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegatedExpressionAccess().getNegateAssignment_1()); }
(rule__NegatedExpression__NegateAssignment_1)?
{ after(grammarAccess.getNegatedExpressionAccess().getNegateAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegatedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegatedExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegatedExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegatedExpressionAccess().getExpAssignment_2()); }
(rule__NegatedExpression__ExpAssignment_2)
{ after(grammarAccess.getNegatedExpressionAccess().getExpAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_0__0__Impl
	rule__PrimaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getNumberLiteralAction_0_0()); }
(

)
{ after(grammarAccess.getPrimaryExpressionAccess().getNumberLiteralAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_0_1()); }
(rule__PrimaryExpression__ValueAssignment_0_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__0__Impl
	rule__PrimaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__1__Impl
	rule__PrimaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getExpAssignment_1_1()); }
(rule__PrimaryExpression__ExpAssignment_1_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getExpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_2__0__Impl
	rule__PrimaryExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getFunctionCallAction_2_0()); }
(

)
{ after(grammarAccess.getPrimaryExpressionAccess().getFunctionCallAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_2__1__Impl
	rule__PrimaryExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRefAssignment_2_1()); }
(rule__PrimaryExpression__RefAssignment_2_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getRefAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_2_2()); }
(rule__PrimaryExpression__Group_2_2__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryExpression__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_2_2__0__Impl
	rule__PrimaryExpression__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_2_0()); }

	'(' 

{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_2_2__1__Impl
	rule__PrimaryExpression__Group_2_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getArgsAssignment_2_2_1()); }
(rule__PrimaryExpression__ArgsAssignment_2_2_1)?
{ after(grammarAccess.getPrimaryExpressionAccess().getArgsAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_2_2__2__Impl
	rule__PrimaryExpression__Group_2_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_2_2_2()); }
(rule__PrimaryExpression__Group_2_2_2__0)*
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_2_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_2_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_2_3()); }

	')' 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PrimaryExpression__Group_2_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_2_2_2__0__Impl
	rule__PrimaryExpression__Group_2_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getCommaKeyword_2_2_2_0()); }

	',' 

{ after(grammarAccess.getPrimaryExpressionAccess().getCommaKeyword_2_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_2_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getArgsAssignment_2_2_2_1()); }
(rule__PrimaryExpression__ArgsAssignment_2_2_2_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getArgsAssignment_2_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_3__0__Impl
	rule__PrimaryExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getVariableReferenceAction_3_0()); }
(

)
{ after(grammarAccess.getPrimaryExpressionAccess().getVariableReferenceAction_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRefAssignment_3_1()); }
(rule__PrimaryExpression__RefAssignment_3_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getRefAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionArgument__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArgument__Group_0__0__Impl
	rule__FunctionArgument__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgument__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentAccess().getBooleanLiteralAction_0_0()); }
(

)
{ after(grammarAccess.getFunctionArgumentAccess().getBooleanLiteralAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgument__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArgument__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgument__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentAccess().getValueAssignment_0_1()); }
(rule__FunctionArgument__ValueAssignment_0_1)
{ after(grammarAccess.getFunctionArgumentAccess().getValueAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionArgument__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArgument__Group_1__0__Impl
	rule__FunctionArgument__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgument__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentAccess().getStringLiteralAction_1_0()); }
(

)
{ after(grammarAccess.getFunctionArgumentAccess().getStringLiteralAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgument__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArgument__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgument__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentAccess().getValueAssignment_1_1()); }
(rule__FunctionArgument__ValueAssignment_1_1)
{ after(grammarAccess.getFunctionArgumentAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__CompartmentTransitionDefinitions__MetamodelAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompartmentTransitionDefinitionsAccess().getMetamodelMetamodelResourceCrossReference_0_0()); }
(
{ before(grammarAccess.getCompartmentTransitionDefinitionsAccess().getMetamodelMetamodelResourceIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getCompartmentTransitionDefinitionsAccess().getMetamodelMetamodelResourceIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getCompartmentTransitionDefinitionsAccess().getMetamodelMetamodelResourceCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompartmentTransitionDefinitions__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompartmentTransitionDefinitionsAccess().getExpressionTransitionBlockParserRuleCall_1_0()); }
	ruleTransitionBlock{ after(grammarAccess.getCompartmentTransitionDefinitionsAccess().getExpressionTransitionBlockParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__TransitionBlock__BlockAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionBlockAccess().getBlockBlockParserRuleCall_0()); }
	ruleBlock{ after(grammarAccess.getTransitionBlockAccess().getBlockBlockParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Block__StatementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStatementsDefStatementParserRuleCall_1_0()); }
	ruleDefStatement{ after(grammarAccess.getBlockAccess().getStatementsDefStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__RetAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getRetReturnStatementParserRuleCall_2_0()); }
	ruleReturnStatement{ after(grammarAccess.getBlockAccess().getRetReturnStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefStatement__VarnameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefStatementAccess().getVarnameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getDefStatementAccess().getVarnameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefStatement__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefStatementAccess().getExprEvaluationParserRuleCall_2_0()); }
	ruleEvaluation{ after(grammarAccess.getDefStatementAccess().getExprEvaluationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__ExpressionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationAccess().getExpressionExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getEvaluationAccess().getExpressionExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
	ruleMultiplication{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightNegatedExpressionParserRuleCall_1_1_0()); }
	ruleNegatedExpression{ after(grammarAccess.getMultiplicationAccess().getRightNegatedExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegatedExpression__NegateAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegatedExpressionAccess().getNegateHyphenMinusKeyword_1_0()); }
(
{ before(grammarAccess.getNegatedExpressionAccess().getNegateHyphenMinusKeyword_1_0()); }

	'-' 

{ after(grammarAccess.getNegatedExpressionAccess().getNegateHyphenMinusKeyword_1_0()); }
)

{ after(grammarAccess.getNegatedExpressionAccess().getNegateHyphenMinusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegatedExpression__ExpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegatedExpressionAccess().getExpPrimaryExpressionParserRuleCall_2_0()); }
	rulePrimaryExpression{ after(grammarAccess.getNegatedExpressionAccess().getExpPrimaryExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ValueAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getValueNUMBERTerminalRuleCall_0_1_0()); }
	RULE_NUMBER{ after(grammarAccess.getPrimaryExpressionAccess().getValueNUMBERTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ExpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getExpExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getPrimaryExpressionAccess().getExpExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__RefAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRefFunctionReferenceCrossReference_2_1_0()); }
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRefFunctionReferenceIDTerminalRuleCall_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getPrimaryExpressionAccess().getRefFunctionReferenceIDTerminalRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getPrimaryExpressionAccess().getRefFunctionReferenceCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ArgsAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getArgsFunctionArgumentParserRuleCall_2_2_1_0()); }
	ruleFunctionArgument{ after(grammarAccess.getPrimaryExpressionAccess().getArgsFunctionArgumentParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ArgsAssignment_2_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getArgsFunctionArgumentParserRuleCall_2_2_2_1_0()); }
	ruleFunctionArgument{ after(grammarAccess.getPrimaryExpressionAccess().getArgsFunctionArgumentParserRuleCall_2_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__RefAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRefScopedVariableReferenceCrossReference_3_1_0()); }
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRefScopedVariableReferenceIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getPrimaryExpressionAccess().getRefScopedVariableReferenceIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getPrimaryExpressionAccess().getRefScopedVariableReferenceCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgument__ValueAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentAccess().getValueBOOLEANTerminalRuleCall_0_1_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getFunctionArgumentAccess().getValueBOOLEANTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgument__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getFunctionArgumentAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}









RULE_BOOLEAN : ('true'|'false');

RULE_NUMBER : (('0'..'9')+ ('.' ('0'..'9')*)?|'.' ('0'..'9')+) (('e'|'E') ('+'|'-')? ('0'..'9')+)?;

RULE_INT : 'this one has been deactivated';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


