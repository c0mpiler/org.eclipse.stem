/*******************************************************************************
 * Copyright (c) 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018
 * IBM Corporation, BfR, and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation and new features
 *     Bundesinstitut f√ºr Risikobewertung - Pajek Graph interface, new Veterinary Models
 *******************************************************************************/
package org.eclipse.stem.diseasemodels.evolving.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.stem.diseasemodels.evolving.util.EvolvingAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EvolvingItemProviderAdapterFactory extends EvolvingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EvolvingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.diseasemodels.evolving.EvolvingDiseaseTransformer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvolvingDiseaseTransformerItemProvider evolvingDiseaseTransformerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.diseasemodels.evolving.EvolvingDiseaseTransformer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvolvingDiseaseTransformerAdapter() {
		if (evolvingDiseaseTransformerItemProvider == null) {
			evolvingDiseaseTransformerItemProvider = new EvolvingDiseaseTransformerItemProvider(this);
		}

		return evolvingDiseaseTransformerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSIDiseaseModelLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvolvingSIDiseaseModelLabelItemProvider evolvingSIDiseaseModelLabelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSIDiseaseModelLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvolvingSIDiseaseModelLabelAdapter() {
		if (evolvingSIDiseaseModelLabelItemProvider == null) {
			evolvingSIDiseaseModelLabelItemProvider = new EvolvingSIDiseaseModelLabelItemProvider(this);
		}

		return evolvingSIDiseaseModelLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSIDiseaseModelLabelValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvolvingSIDiseaseModelLabelValueItemProvider evolvingSIDiseaseModelLabelValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSIDiseaseModelLabelValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvolvingSIDiseaseModelLabelValueAdapter() {
		if (evolvingSIDiseaseModelLabelValueItemProvider == null) {
			evolvingSIDiseaseModelLabelValueItemProvider = new EvolvingSIDiseaseModelLabelValueItemProvider(this);
		}

		return evolvingSIDiseaseModelLabelValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSIDiseaseModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvolvingSIDiseaseModelItemProvider evolvingSIDiseaseModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSIDiseaseModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvolvingSIDiseaseModelAdapter() {
		if (evolvingSIDiseaseModelItemProvider == null) {
			evolvingSIDiseaseModelItemProvider = new EvolvingSIDiseaseModelItemProvider(this);
		}

		return evolvingSIDiseaseModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSIRDiseaseModelLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvolvingSIRDiseaseModelLabelItemProvider evolvingSIRDiseaseModelLabelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSIRDiseaseModelLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvolvingSIRDiseaseModelLabelAdapter() {
		if (evolvingSIRDiseaseModelLabelItemProvider == null) {
			evolvingSIRDiseaseModelLabelItemProvider = new EvolvingSIRDiseaseModelLabelItemProvider(this);
		}

		return evolvingSIRDiseaseModelLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSIRDiseaseModelLabelValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvolvingSIRDiseaseModelLabelValueItemProvider evolvingSIRDiseaseModelLabelValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSIRDiseaseModelLabelValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvolvingSIRDiseaseModelLabelValueAdapter() {
		if (evolvingSIRDiseaseModelLabelValueItemProvider == null) {
			evolvingSIRDiseaseModelLabelValueItemProvider = new EvolvingSIRDiseaseModelLabelValueItemProvider(this);
		}

		return evolvingSIRDiseaseModelLabelValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSIRDiseaseModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvolvingSIRDiseaseModelItemProvider evolvingSIRDiseaseModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSIRDiseaseModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvolvingSIRDiseaseModelAdapter() {
		if (evolvingSIRDiseaseModelItemProvider == null) {
			evolvingSIRDiseaseModelItemProvider = new EvolvingSIRDiseaseModelItemProvider(this);
		}

		return evolvingSIRDiseaseModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSEIRDiseaseModelLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvolvingSEIRDiseaseModelLabelItemProvider evolvingSEIRDiseaseModelLabelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSEIRDiseaseModelLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvolvingSEIRDiseaseModelLabelAdapter() {
		if (evolvingSEIRDiseaseModelLabelItemProvider == null) {
			evolvingSEIRDiseaseModelLabelItemProvider = new EvolvingSEIRDiseaseModelLabelItemProvider(this);
		}

		return evolvingSEIRDiseaseModelLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSEIRDiseaseModelLabelValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvolvingSEIRDiseaseModelLabelValueItemProvider evolvingSEIRDiseaseModelLabelValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSEIRDiseaseModelLabelValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvolvingSEIRDiseaseModelLabelValueAdapter() {
		if (evolvingSEIRDiseaseModelLabelValueItemProvider == null) {
			evolvingSEIRDiseaseModelLabelValueItemProvider = new EvolvingSEIRDiseaseModelLabelValueItemProvider(this);
		}

		return evolvingSEIRDiseaseModelLabelValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSEIRDiseaseModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvolvingSEIRDiseaseModelItemProvider evolvingSEIRDiseaseModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.diseasemodels.evolving.EvolvingSEIRDiseaseModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvolvingSEIRDiseaseModelAdapter() {
		if (evolvingSEIRDiseaseModelItemProvider == null) {
			evolvingSEIRDiseaseModelItemProvider = new EvolvingSEIRDiseaseModelItemProvider(this);
		}

		return evolvingSEIRDiseaseModelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (evolvingDiseaseTransformerItemProvider != null) evolvingDiseaseTransformerItemProvider.dispose();
		if (evolvingSIDiseaseModelLabelItemProvider != null) evolvingSIDiseaseModelLabelItemProvider.dispose();
		if (evolvingSIDiseaseModelLabelValueItemProvider != null) evolvingSIDiseaseModelLabelValueItemProvider.dispose();
		if (evolvingSIDiseaseModelItemProvider != null) evolvingSIDiseaseModelItemProvider.dispose();
		if (evolvingSIRDiseaseModelLabelItemProvider != null) evolvingSIRDiseaseModelLabelItemProvider.dispose();
		if (evolvingSIRDiseaseModelLabelValueItemProvider != null) evolvingSIRDiseaseModelLabelValueItemProvider.dispose();
		if (evolvingSIRDiseaseModelItemProvider != null) evolvingSIRDiseaseModelItemProvider.dispose();
		if (evolvingSEIRDiseaseModelLabelItemProvider != null) evolvingSEIRDiseaseModelLabelItemProvider.dispose();
		if (evolvingSEIRDiseaseModelLabelValueItemProvider != null) evolvingSEIRDiseaseModelLabelValueItemProvider.dispose();
		if (evolvingSEIRDiseaseModelItemProvider != null) evolvingSEIRDiseaseModelItemProvider.dispose();
	}

}
